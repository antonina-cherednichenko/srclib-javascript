#!/usr/bin/env node

var parser = require('nomnom');
var glob = require('glob');
var findpkgs = require('commonjs-findpkgs');
var npm = require('npm');
var path = require('path');
var child_process = require('child_process');
var fs = require('fs');

parser.command("scan-commonjs")
    .option("repo", {
        help: "repository URI"
    })
    .option("subdir", {
        help: "subdirectory in repository"
    })
    .callback(function(opts) {
        // TODO(sqs): support ScanIgnore from repo Srcfile (pass to findpkgs ignore param)
        findpkgs(".", ["node_modules"], function(err, pkgs) {
            if (err) {
                console.error("Scanning failed:", err);
                process.exit(1);
            }

            // omit package.json files that have syntax errors
            pkgs = pkgs.filter(function(pkg) {
                return !pkg.error;
            });

            // filter out undesirable packages (packages whose paths contain
            // "node_modules", "test", etc.)
            pkgs = pkgs.filter(function(pkg) {
                // TODO(sqs): we probably want to process things in node_modules for
                // local code, so remove this filter.
                var pathComps = pkg.dir.split("/");
                return pathComps.indexOf("node_modules") == -1 && pathComps.indexOf("test") == -1 && pathComps.indexOf("templates") == -1 && pathComps.indexOf("bower_components") == -1;
            });


            // automatically include files in the src dir (not just
            // lib). this is somewhat common for client-side libs even
            // though it is technically in violation of the commonjs spec.
            // TODO(sqs): add this functionality (as an option?) to commonjs-findpkgs?
            pkgs.forEach(function(pkg) {
                var srcFiles = glob.sync(path.join(pkg.dir, 'src/**/*.js'));
                if (srcFiles) pkg.libFiles.push.apply(pkg.libFiles, srcFiles);
            });

            // automatically include files in the dir containing the main file (if it's a subdir)
            // TODO(sqs): add this functionality (as an option?) to commonjs-findpkgs?
            pkgs.forEach(function(pkg) {
                if (pkg.package.main && pkg.package.main.indexOf('/') != -1) {
                    var files = glob.sync(path.join(pkg.dir, path.dirname(pkg.package.main), '**/*.js'));
                    if (files) pkg.libFiles.push.apply(pkg.libFiles, files);
                }
            });

            // filter out undesirable source files (minified files) from
            // packages
            pkgs.forEach(function(pkg) {
                pkg.libFiles = pkg.libFiles.filter(function(f) {
                    return !/\.min\.js$/.test(f);
                });
            });

            // convert from commonjs-findpkgs format to source unit
            var srcunits = pkgs.map(function(pkg) {
                // collect all deps
                var allDeps = [{
                    name: "node",
                    "version": ""
                }];

                function collectDeps(deps) {
                    if (deps) Object.keys(deps).forEach(function(name) {
                        allDeps.push({
                            name: name,
                            version: deps[name]
                        });
                    });
                }

                collectDeps(pkg.package.dependencies);
                collectDeps(pkg.package.devDependencies);

                files = arrayUnique(pkg.libFiles.concat(pkg.testFiles).filter(function(f) {
                    return fs.statSync(f).isFile();
                }));

                return {
                    Name: pkg.package.name,
                    Type: "CommonJSPackage",
                    Dir: pkg.dir,
                    Files: files,
                    Dependencies: allDeps,
                    Data: pkg.package,
                    Ops: {
                        depresolve: null,
                        graph: null
                    }
                }
            });

            console.log(JSON.stringify(srcunits, null, 2));
        });
    })
    .help("scan for CommonJS packages");

parser.command("depresolve")
    .callback(function(opts) {
        var stdin = process.stdin,
            stdout = process.stdout,
            inputChunks = [];

        stdin.resume();
        stdin.setEncoding("utf8");

        stdin.on("data", function(chunk) {
            inputChunks.push(chunk);
        });

        stdin.on("end", function() {
            var inputJSON = inputChunks.join("");
            var commonJSPackage = JSON.parse(inputJSON);

            var remaining = commonJSPackage.Dependencies ? commonJSPackage.Dependencies.length : 0;
            var resolutions = [];

            if (remaining == 0) {
                console.log('[]');
                return;
            }

            commonJSPackage.Dependencies.forEach(function(dep) {
                var i = commonJSPackage.Dependencies.indexOf(dep);
                resolutions[i] = {
                    Raw: dep
                };
                var spec = dep.name + (dep.version ? "@" + dep.version : "");
                npm.load(function(err, npm) {
                    if (err) {
                        console.error("npm.load failed: ", err);
                        process.exit(1)
                    }

                    npm.commands.view([spec], true, function(err, data) {
                        if (hardcodedRepoURLs[spec]) {
                            data = {
                                "": {}
                            };
                            err = null
                        }

                        if (err) {
                            resolutions[i].Error = "error occurred while resolving '" + spec + "': " + JSON.stringify(err);
                        } else if (!data || Object.keys(data).length == 0) {
                            resolutions[i].Error = "no npm package found with spec " + spec;
                        } else {
                            // Choose a version at random if it spits back a lot (TODO(sqs):
                            // this is stupid, we want the version that `npm install` would
                            // install, not just any random version, especially when
                            // version=='*').
                            var chooseVersion = Object.keys(data)[0];
                            var info = data[chooseVersion];

                            var repoURL = "";
                            if (hardcodedRepoURLs[spec]) {
                                repoURL = hardcodedRepoURLs[spec];
                            } else if (info.repository) {
                                if (typeof info.repository == "string") repoURL = info.repository;
                                else repoURL = info.repository.url;
                            }

                            resolutions[i].Target = {
                                ToRepoCloneURL: repoURL,
                                ToUnit: info.name,
                                ToUnitType: "CommonJSPackage",
                                ToVersionString: info.version
                            };
                        }

                        remaining--;
                        if (remaining == 0) {
                            // done resolving all
                            console.log(JSON.stringify(resolutions, null, 2));
                        }
                    });
                });
            });
        });
    })
    .help("resolves dependencies of a CommonJS package");

var hardcodedRepoURLs = {
    "node": "https://github.com/joyent/node.git"
};

parser.command("graph")
    .callback(function(opts) {
        var stdin = process.stdin,
            stdout = process.stdout,
            inputChunks = [];

        stdin.resume();
        stdin.setEncoding("utf8");

        stdin.on("data", function(chunk) {
            inputChunks.push(chunk);
        });

        stdin.on("end", function() {
            var inputJSON = inputChunks.join("");
            var commonJSPackage = JSON.parse(inputJSON);

            function graph() {
                if (commonJSPackage.Files.length == 0) {
                    console.log("{}");
                    process.exit(0);
                }
                var dir = ".";
                var args = ["--max-old-space-size=8192"];
                args.push(path.join(__dirname, "../lib/analysis"));

                commonJSPackage.Files.forEach(function(f) {
                    args.push(path.join(dir, f));
                });

                child_process.execFile("node", args, {
                    maxBuffer: 50000 * 1024 * 1024
                }, function(err, stdout, stderr) {
                    if (stderr) console.error(stderr);
                    if (err) {
                        console.error("Graphing " + commonJSPackage.Name + " failed:", err);
                        return;
                    }

                    console.log(stdout);
                });
            }

            var npmCmd = null;
            if (process.platform == "win32") {
                npmCmd = "npm.cmd";
            } else {
                npmCmd = "npm";
            }
            child_process.execFile(npmCmd, ["install"], (err, stdout, stderr) => {
                if (err) {
                    console.error("!!!! An error occured while instaling packages", err);
                }
                console.error("npm install stdout", stdout);
                console.error("npm install stderr", stderr);
                console.error("npm packages are installed");
                graph();
            });
        });
    })
    .help("graph a CommonJS package using tern");

parser.parse();

var arrayUnique = function(a) {
    return a.reduce(function(p, c) {
        if (p.indexOf(c) < 0) p.push(c);
        return p;
    }, []);
};
